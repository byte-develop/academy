import random
import logging
from aiogram import Router, types, F
from aiocryptopay import AioCryptoPay, Networks






cryptopay = AioCryptoPay(
    token="105772:AAynYu5wytrQwBtKU98iLf84DLJ7bfvUVhn",  # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Ä–µ–∞–ª—å–Ω—ã–π API Token (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    network=Networks.MAIN_NET
)

from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.types import CallbackQuery

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from typing import Union


class FSMFillForm(StatesGroup):
    topup_amount = State()

from aiogram.filters import StateFilter
from database.settings import get_users_collection
from services.subscription_service import check_subscriptions
from database.settings import get_settings
from services.user_service import register_user, get_user
from services.user_service import decrease_limit  # –î–æ–±–∞–≤—å, –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç
from database.materials import (
    get_materials_by_category_and_section,
    add_to_favorites,
    get_favorites,
    remove_from_favorites  # –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
)
from utils.keyboards import (
    get_main_menu_keyboard,
    get_category_inline_keyboard,
    get_sections_inline_keyboard,
    get_material_navigation_keyboard,
    get_subscription_levels_keyboard
)
from utils.sections import get_category_list, get_sections_by_category  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

router = Router()

def format_material_name(name: str, price: int, max_len: int = 35) -> str:
    cropped = name if len(name) <= max_len else name[:max_len - 3] + "..."
    return f"{cropped} \U0001F48E {price}"

def build_materials_list_keyboard(materials: list) -> InlineKeyboardMarkup:
    keyboard = []
    for material in materials:
        button_text = format_material_name(material.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"), material.get("price", 0))
        callback_data = f"open_material:{str(material['_id'])}"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º"
    keyboard.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="back_to_section")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)



logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
class UserStates(StatesGroup):
    waiting_for_captcha = State()
    waiting_for_category = State()
    waiting_for_section = State()

class ViewMaterial(StatesGroup):
    viewing = State()
    viewing_favorites = State()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
async def generate_subscription_keyboard(settings_data, missing_subs):
    builder = InlineKeyboardBuilder()
    
    if "channel" in missing_subs and settings_data.get("channel_invite_link"):
        builder.button(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=settings_data["channel_invite_link"])
    
    if "chat" in missing_subs and settings_data.get("chat_invite_link"):
        builder.button(text="üí¨ –ù–∞—à —á–∞—Ç", url=settings_data["chat_invite_link"])
    
    builder.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscriptions")
    
    builder.adjust(2, 1)
    return builder.as_markup()

# /start
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    try:
        await state.clear()

        user = await get_user(message.from_user.id)

        if user:
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç —Å–Ω–æ–≤–∞, {message.from_user.first_name}!",
                reply_markup=get_main_menu_keyboard()
            )
            return

        num1 = random.randint(1, 10)
        num2 = random.randint(1, 10)
        correct_answer = num1 + num2

        await state.update_data(captcha_answer=str(correct_answer))

        options = [correct_answer, random.randint(2, 20), random.randint(2, 20)]
        random.shuffle(options)

        keyboard = InlineKeyboardBuilder()
        for option in options:
            keyboard.button(text=str(option), callback_data=f"captcha:{option}")
        keyboard.adjust(3)

        await message.answer(
            f"üõ° –î–ª—è –≤—Ö–æ–¥–∞ —Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä:\n\n<b>{num1} + {num2} = ?</b>",
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(UserStates.waiting_for_captcha)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ø—á–∏
@router.callback_query(UserStates.waiting_for_captcha, F.data.startswith("captcha:"))
async def captcha_check(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    correct_answer = data.get("captcha_answer")
    user_answer = callback.data.split(":")[1]

    if user_answer == correct_answer:
        await state.clear()

        settings_data = await get_settings()
        subscription_status = await check_subscriptions(callback.from_user.id)

        if subscription_status["subscribed"]:
            await register_user(callback.from_user)

            await callback.message.answer(
                "‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.message.delete()
        else:
            keyboard = await generate_subscription_keyboard(settings_data, subscription_status["missing"])
            await callback.message.edit_text(
                "üì¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç:",
                reply_markup=keyboard
            )
        await callback.answer()
    else:
        await callback.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", show_alert=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∫–Ω–æ–ø–∫–æ–π
@router.callback_query(F.data == "check_subscriptions")
async def check_subs_callback(callback: types.CallbackQuery, state: FSMContext):
    try:
        settings_data = await get_settings()
        subscription_status = await check_subscriptions(callback.from_user.id)

        if subscription_status["subscribed"]:
            users_collection = await get_users_collection()
            user = await users_collection.find_one({"user_id": callback.from_user.id})

            if not user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
                await register_user(callback.from_user)
                users_collection = await get_users_collection()
                user = await users_collection.find_one({"user_id": callback.from_user.id})

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫—Ä–∏—Å—Ç–∞–ª–ª—ã
            if not user.get("got_test_crystals"):
                await users_collection.update_one(
                    {"user_id": callback.from_user.id},
                    {
                        "$set": {"got_test_crystals": True},
                        "$inc": {"crystals": 50}
                    }
                )

            await callback.message.answer(
                "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 50 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ üíé",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.message.delete()

        else:
            keyboard = await generate_subscription_keyboard(settings_data, subscription_status["missing"])
            await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!", show_alert=True)
            await callback.message.edit_reply_markup(reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Error in check subscription: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)


# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏" ---
@router.message(F.text == "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def categories_handler(message: types.Message, state: FSMContext):
    subscription_status = await check_subscriptions(message.from_user.id)

    if not subscription_status["subscribed"]:
        settings_data = await get_settings()
        keyboard = await generate_subscription_keyboard(settings_data, subscription_status["missing"])
        await message.answer(
            "üì¢ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞:\n\n"
            "‚Ä¢ –ù–∞—à –∫–∞–Ω–∞–ª –∏ —á–∞—Ç!",
            reply_markup=keyboard
        )
        return

    keyboard = await get_category_inline_keyboard()
    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )
    await state.set_state(UserStates.waiting_for_category)

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é ---
@router.callback_query(F.data.startswith("select_category:"))
async def user_category_chosen(callback: types.CallbackQuery, state: FSMContext):
    category_id = callback.data.split(":")[1]
    await state.update_data(category_id=category_id)
    keyboard = await get_sections_inline_keyboard(category_id)
    await callback.message.edit_text(
        "üìÇ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )
    await state.set_state(UserStates.waiting_for_section)
    await callback.answer()

# --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–¥–µ–ª ---
@router.callback_query(F.data.startswith("select_section:"))
async def user_section_chosen(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    category_id = parts[1]
    section_id = parts[2]

    categories = await get_category_list()
    category = next((c["name"] for c in categories if c["category_id"] == category_id), None)

    sections = await get_sections_by_category(category_id)
    section = next((s["name"] for s in sections if s["section_id"] == section_id), None)

    if not category or not section:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∞.")
        await state.clear()
        return

    materials = await get_materials_by_category_and_section(category, section)

    if not materials:
        await callback.message.edit_text("‚ùå –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        await state.clear()
        return

    keyboard = build_materials_list_keyboard(materials)
    await state.update_data(category_id=category_id, section_id=section_id)
    await callback.message.edit_text("üìö –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:", reply_markup=keyboard)
    await callback.answer()



# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
async def send_current_material(message, materials, index, state: FSMContext, user_id: int):
    from services.user_service import get_user, decrease_limit

    material = materials[index]
    current_state = await state.get_state()
    is_favorites = current_state == ViewMaterial.viewing_favorites.state

    if not is_favorites:
        user = await get_user(user_id)
        if not user:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        price = material.get("price", 0)
        if user.get("crystals", 0) < price:
            await message.answer(
    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤. –£ –≤–∞—Å: {user.get('crystals', 0)}, –Ω—É–∂–Ω–æ: {price}",
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="open_profile")]
    ])

)
            return

        await decrease_limit(user_id, price)

    await state.update_data(prev_state=current_state)
    await state.set_state(ViewMaterial.viewing_favorites if is_favorites else ViewMaterial.viewing)

    text = f"üìö <b>{material['name']}</b>\n\nüìù {material['description']}"
    keyboard = get_material_navigation_keyboard(
        current_index=index,
        total=len(materials),
        has_file=bool(material.get("file_id")),
        is_favorites=is_favorites
    )

    if material.get("file_id"):
        await message.answer_document(
            material['file_id'],
            caption=text,
            parse_mode="HTML",
            reply_markup=keyboard,
            protect_content=True
        )
    else:
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard,
            protect_content=True
        )



# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º (–¥–ª—è –æ–±–æ–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π) ---
@router.callback_query(F.data.in_(["next_material", "prev_material", "add_to_favorites"]))
async def navigate_materials(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –æ–¥–Ω–æ–º –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if current_state not in [ViewMaterial.viewing.state, ViewMaterial.viewing_favorites.state]:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–Ω–µ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ)
    
    materials = data.get("materials", [])
    current_index = data.get("current_index", 0)
    new_index = current_index
    if callback.data == "next_material" and current_index < len(materials) - 1:
        new_index += 1
    elif callback.data == "prev_material" and current_index > 0:
        new_index -= 1
    price = materials[new_index].get("price", 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if callback.data == "next_material" and current_index < len(materials) - 1:
        current_index += 1
    elif callback.data == "prev_material" and current_index > 0:
        current_index -= 1
    elif callback.data == "add_to_favorites":
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º)
        if current_state != ViewMaterial.viewing_favorites.state:
            await add_to_favorites(callback.from_user.id, materials[current_index])
            await callback.answer("‚≠ê –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
            return
        else:
            await callback.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_index=current_index)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
    await send_current_material(callback.message, materials, current_index, state, user_id=callback.from_user.id)
    await callback.answer()

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ---
@router.message(F.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_favorites(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    favorites = await get_favorites(message.from_user.id)

    if not favorites:
        await message.answer("‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        return

    # –í–ê–ñ–ù–û: —è–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    await state.set_state(ViewMaterial.viewing_favorites)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    await state.update_data(materials=favorites, current_index=0)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
    await send_current_material(message, favorites, 0, state, user_id=message.from_user.id)


    
@router.callback_query(F.data.startswith("buy_sub:"))
async def buy_subscription_handler(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ CryptoBot
    """
    try:
        user_id = callback.from_user.id
        level = int(callback.data.split(":")[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        if level not in [1, 2, 3]:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot
        from payments.payment_service import create_payment_invoice
        invoice_data = await create_payment_invoice(user_id, level)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from config import settings
        level_name = settings.SUBSCRIPTION_LEVELS_NAMES.get(level, f"–£—Ä–æ–≤–µ–Ω—å {level}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", url=invoice_data["payment_url"])],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscription")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
        await callback.message.answer(
            f"üîê <b>–ü–æ–¥–ø–∏—Å–∫–∞ '{level_name}'</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {invoice_data['amount']} USD\n\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π\n",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == "back_to_subscription")
async def back_to_subscription_handler(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
    """
    await show_subscription_status(callback.message)
    await callback.answer()
    

async def create_invoice(user_id: int, amount: float, level: int) -> str:
    invoice = await cryptopay.create_invoice(
        asset="USDT",
        amount=amount,
        description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {level} —É—Ä–æ–≤–Ω—è –¥–ª—è {user_id}",
        hidden_message=f"{user_id}:{level}"
    )
    return invoice.bot_invoice_url  # ‚Üê –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL



@router.callback_query(F.data.startswith("buy_sub:"))
async def buy_subscription_handler(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ CryptoBot
    """
    try:
        user_id = callback.from_user.id
        level = int(callback.data.split(":")[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        if level not in [1, 2, 3]:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –∏–∑ payment_service
        from payments.payment_service import cryptobot_webhook_url, create_payment_invoice
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞—è URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        invoice_data = await create_payment_invoice(
            user_id=user_id, 
            level=level,
            callback_url=cryptobot_webhook_url  # –ü–µ—Ä–µ–¥–∞–µ–º URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from config import settings
        level_name = settings.SUBSCRIPTION_LEVELS_NAMES.get(level, f"–£—Ä–æ–≤–µ–Ω—å {level}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", url=invoice_data["payment_url"])],
            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"check_payment:{invoice_data['invoice_id']}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscription")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
        await callback.message.answer(
            f"üîê <b>–ü–æ–¥–ø–∏—Å–∫–∞ '{level_name}'</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {invoice_data['amount']} USDT\n\n"
            f"‚Ä¢ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            f"‚Ä¢ –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'\n"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –±–µ—Å—Å—Ä–æ—á–Ω–æ\n",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)




@router.callback_query(F.data == "back_to_section")
async def back_to_section(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category_id = data.get("category_id")
    section_id = data.get("section_id")

    if not category_id or not section_id:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª.")
        await state.clear()
        return

    categories = await get_category_list()
    category = next((c["name"] for c in categories if c["category_id"] == category_id), None)

    sections = await get_sections_by_category(category_id)
    section = next((s["name"] for s in sections if s["section_id"] == section_id), None)

    if not category or not section:
        await callback.message.answer("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    materials = await get_materials_by_category_and_section(category, section)
    if not materials:
        await callback.message.answer("‚ùå –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
        await state.clear()
        return
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = await get_sections_inline_keyboard(category_id)
    await callback.message.edit_text(
        f"üìÇ –†–∞–∑–¥–µ–ª: {section} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})",
        reply_markup=keyboard
    )
    await state.set_state(UserStates.waiting_for_section)
    await callback.answer("‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Ä–∞–∑–¥–µ–ª—É")


@router.callback_query(F.data.startswith("back_to_category:"))
async def back_to_category_user(callback: types.CallbackQuery, state: FSMContext):
    category_id = callback.data.split(":")[1]
    await state.update_data(category_id=category_id)

    keyboard = await get_sections_inline_keyboard(category_id)
    await callback.message.edit_text(
        "üìÇ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboard
    )
    await state.set_state(UserStates.waiting_for_section)
    await callback.answer()



@router.callback_query(F.data == "go_back")
async def go_back(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    prev_state = data.get("prev_state")

    if prev_state:
        await state.set_state(prev_state)
        await callback.message.answer("‚Ü©Ô∏è –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.")
    else:
        await callback.message.answer("üö´ –ù–µ–∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è.")

@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ —Ä–∞–∑–¥–µ–ª–æ–≤ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    keyboard = await get_category_inline_keyboard()
    
    # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    await callback.message.edit_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await state.set_state(UserStates.waiting_for_category)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await callback.answer("‚Ü©Ô∏è –í–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ---
@router.callback_query(F.data == "remove_from_favorites")
async def remove_from_favorites_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    data = await state.get_data()
    materials = data.get("materials", [])
    current_index = data.get("current_index", 0)
    
    if not materials or current_index >= len(materials):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
    material = materials[current_index]
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –í–∞–∂–Ω–æ: material –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–µ _id –∏–ª–∏ id –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ë–î
    material_id = str(material.get("_id", material.get("id", "")))
    if not material_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        return
        
    success = await remove_from_favorites(callback.from_user.id, material_id)
    
    if not success:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        return
    
    # –£–¥–∞–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    materials.pop(current_index)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not materials:
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer(
            "‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –±–æ–ª—å—à–µ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        await callback.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
        return
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    if current_index >= len(materials):
        current_index = len(materials) - 1
        
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(materials=materials, current_index=current_index)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
    await send_current_material(callback.message, materials, current_index, state, user_id=callback.from_user.id)
    await callback.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == "back_to_subscription")
async def back_to_subscription_handler(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
    """
    await show_subscription_status(callback.message)
    await callback.answer()


# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ---
class ProfileStates(StatesGroup):
    waiting_for_topup_amount = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë§ –ü—Ä–æ—Ñ–∏–ª—å"
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
@router.callback_query(F.data == "open_profile")
async def show_profile(message_or_callback: Union[Message, CallbackQuery], state: FSMContext):
    user_id = message_or_callback.from_user.id
    user = await get_user(user_id)
    crystals = user.get("crystals", 0)

    text = (
        "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üíé –ë–∞–ª–∞–Ω—Å: <b>{crystals}</b> –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤\n\n"
        "üí∞ <b>–ü—Ä–∞–π—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:</b>\n"
        "‚ñ™Ô∏è 1 $ ‚Üí 50 üíé\n"
        "‚ñ™Ô∏è 5 $ ‚Üí 300 üíé\n"
        "‚ñ™Ô∏è 10 $ ‚Üí 650 üíé\n"
        "‚ñ™Ô∏è >10 $ ‚Üí 75 üíé –∑–∞ $ (–±–æ–Ω—É—Å 15%)"
    )

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="topup_crystals")]
    ])

    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, reply_markup=kb, parse_mode="HTML")
    else:
        await message_or_callback.message.answer(text, reply_markup=kb, parse_mode="HTML")



# –ö–Ω–æ–ø–∫–∞ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"
@router.callback_query(F.data == "topup_crystals")
async def prompt_topup(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ProfileStates.waiting_for_topup_amount)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ $ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):")
    await callback.answer()


@router.message(StateFilter(FSMFillForm.topup_amount))
async def process_topup_amount(message: Message, state: FSMContext):
    try:
        usd_amount = float(message.text.strip().replace(",", "."))
        if usd_amount < 1:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî $1. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â—ë —Ä–∞–∑:")
            return

        invoice = await create_crystal_invoice(user_id=message.from_user.id, usd_amount=usd_amount)

        await message.answer(
            text=f"üí≥ –°—á—ë—Ç –Ω–∞ —Å—É–º–º—É ${usd_amount:.2f} —Å–æ–∑–¥–∞–Ω!\n\n–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {invoice.pay_url}",
            reply_markup=menu_reply)
        await state.clear()

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: 5")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –ü—Ä–∏—ë–º —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@router.message(ProfileStates.waiting_for_topup_amount)
async def process_topup_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip().replace(",", "."))
        if amount <= 0:
            raise ValueError

        # –ü–æ–ª—É—á–∞–µ–º user_id
        user_id = message.from_user.id

        # –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å
        invoice = await cryptopay.create_invoice(
            asset="USDT",  # –∏–ª–∏ "TON", "BTC", –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É
            amount=amount,
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}",
            hidden_message="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ö—Ä–∏—Å—Ç–∞–ª–ª—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            payload=str(user_id)  # –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏ webhook-–æ–±—Ä–∞–±–æ—Ç–∫–µ
        )

        await message.answer(
            f"‚úÖ –°—á—ë—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ —Å—É–º–º—É {amount} USDT\n"
            f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{invoice.bot_invoice_url}"
        )

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")


@router.callback_query(F.data.startswith("open_material:"))
async def open_material_by_id(callback: CallbackQuery, state: FSMContext):
    from database.materials import get_materials_by_category_and_section

    material_id = callback.data.split(":", 1)[1]
    data = await state.get_data()
    category_id = data.get("category_id")
    section_id = data.get("section_id")

    # –ø–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞
    categories = await get_category_list()
    sections = await get_sections_by_category(category_id)
    category = next((c["name"] for c in categories if c["category_id"] == category_id), None)
    section = next((s["name"] for s in sections if s["section_id"] == section_id), None)

    if not category or not section:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: —Ä–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    materials = await get_materials_by_category_and_section(category, section)

    for i, mat in enumerate(materials):
        if str(mat['_id']) == material_id:
            await state.update_data(materials=materials, current_index=i)
            await send_current_material(callback.message, materials, i, state, user_id=callback.from_user.id)
            return

    await callback.message.answer("‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(F.data == "open_profile")
async def open_profile_handler(callback: CallbackQuery, state: FSMContext):
    await show_profile(callback, state)
    await callback.answer()
