import random
import logging
from aiogram.fsm.state import default_state
from aiogram.types import Message


from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from services.user_service import is_admin
from services.subscription_service import check_subscriptions
from database.settings import get_settings, update_settings
from services.user_service import register_user
from aiogram.types import CallbackQuery
from database.materials import (
    get_materials_by_category_and_section,
    get_all_materials,
    add_material,
    delete_material
)
from services.category_service import get_all_categories
from bson import ObjectId

router = Router()
logger = logging.getLogger(__name__)

class AdminStates(StatesGroup):
    waiting_for_crystal_user_id = State()
    waiting_for_crystal_amount = State()
    waiting_for_new_channel_id = State()
    waiting_for_new_chat_id = State()
    waiting_for_new_channel_link = State()
    waiting_for_new_chat_link = State()
    waiting_for_material_name = State()
    waiting_for_material_description = State()
    waiting_for_material_price = State()
    waiting_for_material_file = State()
    waiting_for_category_name = State()  # <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ
    


@router.message(Command("admin"))
async def admin_panel(message: Message, user_id: int = None):
    uid = user_id if user_id is not None else message.from_user.id
    isadm = await is_admin(uid)

    await message.answer(f"üîê –°—Ç–∞—Ç—É—Å: {'‚úÖ –∞–¥–º–∏–Ω' if isadm else '‚ùå –ù–ï –∞–¥–º–∏–Ω'}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
    ]))
    if not isadm:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return



    settings_data = await get_settings()
    channel_id = settings_data.get("channel_id", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω")
    chat_id = settings_data.get("chat_id", "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω")
    channel_link = settings_data.get("channel_invite_link") or "https://t.me/"
    chat_link = settings_data.get("chat_invite_link") or "https://t.me/"

    text = (
        f"<b>üìä –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"<b>üì° –ö–∞–Ω–∞–ª:</b> <code>{channel_id}</code>\n"
        f"<a href='{channel_link}'>üîπ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª</a>\n\n"
        f"<b>üí¨ –ß–∞—Ç:</b> <code>{chat_id}</code>\n"
        f"<a href='{chat_link}'>üî∏ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç</a>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )


    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞", callback_data="edit_channel_id"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ID —á–∞—Ç–∞", callback_data="edit_chat_id")
        ],
        [
            InlineKeyboardButton(text="üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É", callback_data="choose_link_type")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="edit_channel_link"),
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç", callback_data="edit_chat_link")
        ],
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="add_material"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="delete_material")
        ],
        [
        InlineKeyboardButton(text="üíé –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã", callback_data="add_crystals")
        ],
        [
            InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞", callback_data="catalog_setup")
        ]
    ])


    await message.answer(text, parse_mode="HTML", reply_markup=keyboard, disable_web_page_preview=True)

@router.callback_query(F.data == "choose_link_type")
async def choose_link_type(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="generate_channel_link")
        ],
        [
            InlineKeyboardButton(text="üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç", callback_data="generate_chat_link")
        ]
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –¥–ª—è —á–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "generate_channel_link")
async def generate_channel_invite_link(callback: types.CallbackQuery):
    settings_data = await get_settings()
    channel_id = settings_data.get("channel_id")

    if not channel_id:
        await callback.message.answer("‚ùå ID –∫–∞–Ω–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        await callback.answer()
        return

    try:
        new_link = await callback.bot.create_chat_invite_link(channel_id)
        await update_settings({"channel_invite_link": new_link.invite_link})
        await callback.message.answer(f"‚úÖ –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª:\n{new_link.invite_link}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
    ]))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª: {e}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.")
    await callback.answer()

@router.callback_query(F.data == "generate_chat_link")
async def generate_chat_invite_link(callback: types.CallbackQuery):
    settings_data = await get_settings()
    chat_id = settings_data.get("chat_id")

    if not chat_id:
        await callback.message.answer("‚ùå ID —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.")
        await callback.answer()
        return

    try:
        new_link = await callback.bot.create_chat_invite_link(chat_id)
        await update_settings({"chat_invite_link": new_link.invite_link})
        await callback.message.answer(f"‚úÖ –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç:\n{new_link.invite_link}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
    ]))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç: {e}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç.")
    await callback.answer()

@router.callback_query(F.data == "add_material")
async def start_add_material(callback: types.CallbackQuery, state: FSMContext):
    categories = await get_all_categories()

    keyboard = InlineKeyboardBuilder()
    for cat in categories:
        keyboard.button(text=cat.get("name", cat.get("category_id", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")), callback_data=f"catmat_{cat['category_id']}")
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")    
    keyboard.adjust(1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("catmat_"))
async def choose_category(callback: types.CallbackQuery, state: FSMContext):
    category_id = callback.data.replace("catmat_", "")
    categories = await get_all_categories()
    category = next((c for c in categories if c["category_id"] == category_id), None)

    if not category or not category.get("sections"):
        await callback.message.answer(
            "‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="delete_material")]
            ])
        )
        return

    await state.update_data(category_id=category_id, category_name=category["name"])

    sections = category["sections"]
    keyboard = InlineKeyboardBuilder()
    for sec in sections:
        keyboard.button(text=sec["name"], callback_data=f"sec_{sec['section_id']}")
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")    
    keyboard.adjust(1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("sec_"))
async def choose_section(callback: types.CallbackQuery, state: FSMContext):
    section_id = callback.data.replace("sec_", "")
    data = await state.get_data()
    category_id = data.get("category_id")

    categories = await get_all_categories()
    category = next((c for c in categories if c["category_id"] == category_id), None)
    if not category:
        await callback.message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    section = next((s for s in category["sections"] if s["section_id"] == section_id), None)
    if not section:
        await callback.message.answer("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await state.update_data(section_id=section_id, section_name=section["name"])
    await state.set_state(AdminStates.waiting_for_material_name)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")
    await callback.answer()


@router.message(AdminStates.waiting_for_material_name)
async def material_name_step(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AdminStates.waiting_for_material_description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:")


@router.message(AdminStates.waiting_for_material_description)
async def material_description_step(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(AdminStates.waiting_for_material_price)
    await message.answer("üíé –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–≤ –∫—Ä–∏—Å—Ç–∞–ª–ª–∞—Ö):")

@router.message(AdminStates.waiting_for_material_price)
async def material_price_step(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        if price < 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0):")
        return
    await state.update_data(price=price)
    await message.answer(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª':",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–π–ª", callback_data="skip_file")]
        ])
    )

    await state.set_state(AdminStates.waiting_for_material_file)

@router.message(AdminStates.waiting_for_material_file)
async def material_file_step(message: types.Message, state: FSMContext):
    data = await state.get_data()
    file_id = message.document.file_id if message.document else None
    await add_material(
        category_id=data["category_id"],
        section_id=data["section_id"],
        name=data["name"],
        description=data["description"],
        price=data['price'],
        file_id=file_id
    )
    await state.clear()    
    await message.answer(
        "‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="add_material")]
    ])
)


@router.callback_query(F.data == "skip_file")
async def skip_file_step(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await add_material(
        category_id=data["category_id"],
        section_id=data["section_id"],
        name=data["name"],
        description=data["description"],
        price=data['price'],
        file_id=None
    )
    await state.clear()
    await callback.message.edit_text(
        "‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –±–µ–∑ —Ñ–∞–π–ª–∞!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="add_material")]
        ])
    )
    await callback.answer()



    await state.set_state(AdminStates.viewing_materials)
    await state.update_data(material_index=0)
    await show_material(callback.message, materials[0], 0, len(materials))
    await state.update_data(materials=materials)
    await callback.answer()

    if callback.data == "delete_material":
        material = materials[index]
        await delete_material(str(material["_id"]))
        materials.pop(index)
        if not materials:
            await callback.message.answer("üóëÔ∏è –ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª—ë–Ω. –ë–æ–ª—å—à–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ—Ç.")
            await state.clear()
            await callback.answer()
            return
        index = max(0, index - 1)

    elif callback.data == "next_material":
        index = (index + 1) % len(materials)
    elif callback.data == "prev_material":
        index = (index - 1) % len(materials)

    await state.update_data(material_index=index, materials=materials)
    await show_material(callback.message, materials[index], index, len(materials))
    await callback.answer()

@router.callback_query(F.data == "add_category")
async def start_add_category(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AdminStates.waiting_for_category_name)
    await callback.answer()





# === –ú–µ–Ω—é "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞" ===
SECTION_CATEGORY_MAP = {}
EDIT_SECTION_MAP = {}

@router.callback_query(F.data == "catalog_setup")
async def open_catalog_settings(callback: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="edit_category"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="delete_category")
        ],
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data="add_section"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data="edit_section"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data="delete_section")
        ]
    ])
    await callback.message.answer("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=keyboard)
    await callback.answer()


# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
@router.callback_query(F.data == "edit_category")
async def edit_category_handler(callback: types.CallbackQuery, state: FSMContext):
    from services.category_service import get_all_categories
    categories = await get_all_categories()

    if not categories:
        await callback.message.answer("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return

    keyboard = InlineKeyboardBuilder()
    for cat in categories:
        keyboard.button(text=cat.get("name", cat.get("category_id", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")), callback_data=f"editcat_{cat['category_id']}")
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")    
    keyboard.adjust(1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("editcat_"))
async def prompt_new_category_name(callback: types.CallbackQuery, state: FSMContext):
    category_id = callback.data.replace("editcat_", "")
    await state.update_data(edit_category_id=category_id)
    await state.set_state(AdminStates.waiting_for_category_name)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

@router.message(AdminStates.waiting_for_category_name)
async def handle_category_name_input(message: types.Message, state: FSMContext):
    from services.category_service import add_category, edit_category
    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    data = await state.get_data()
    edit_id = data.get("edit_category_id")

    if edit_id:
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await edit_category(edit_id, name)
        await message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤: {name}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
            ])
        )
    else:
        # –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        import random
        category_id = f"cat_{random.randint(1000, 9999)}"
        await add_category({"category_id": category_id, "name": name})
        await message.answer(
            "‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
            ])
        )

    await state.clear()



# === –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
@router.callback_query(F.data == "delete_category")
async def delete_category_handler(callback: types.CallbackQuery):
    from services.category_service import get_all_categories
    categories = await get_all_categories()

    if not categories:
        await callback.message.answer("‚ùå –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return

    keyboard = InlineKeyboardBuilder()
    for cat in categories:
        keyboard.button(text=cat.get("name", cat.get("category_id", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")), callback_data=f"delcat_{cat['category_id']}")
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")    
    keyboard.adjust(1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("delcat_"))
async def confirm_delete_category(callback: types.CallbackQuery):
    from services.category_service import delete_category
    category_id = callback.data.replace("delcat_", "")
    await delete_category(category_id)
    await callback.message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
    ]))


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ ===

@router.callback_query(F.data == "add_section")
async def show_categories_for_section(callback: types.CallbackQuery):
    from services.category_service import get_all_categories
    categories = await get_all_categories()

    keyboard = InlineKeyboardBuilder()
    for cat in categories:
        keyboard.button(text=cat.get("name", cat.get("category_id", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")), callback_data=f"sectioncat_{cat['category_id']}")
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")    
    keyboard.adjust(1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞:", reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("sectioncat_"))
async def ask_section_name(callback: types.CallbackQuery):
    category_id = callback.data.replace("sectioncat_", "")
    SECTION_CATEGORY_MAP[callback.from_user.id] = category_id
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]))

@router.callback_query(F.data == "edit_section")
async def choose_category_to_edit_section(callback: types.CallbackQuery):
    from services.category_service import get_all_categories
    categories = await get_all_categories()

    keyboard = InlineKeyboardBuilder()
    for cat in categories:
        keyboard.button(text=cat.get("name", cat.get("category_id", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")), callback_data=f"edit_sec_cat:{cat['category_id']}")
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")   
    keyboard.adjust(1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏:", reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("edit_sec_cat:"))
async def choose_section_to_rename(callback: types.CallbackQuery):
    from services.category_service import get_all_categories
    category_id = callback.data.split("edit_sec_cat:")[1]
    categories = await get_all_categories()
    category = next((c for c in categories if c["category_id"] == category_id), None)

    if not category or not category.get("sections"):
        await callback.message.answer("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–æ–≤.")
        return

    keyboard = InlineKeyboardBuilder()
    for sec in category["sections"]:
        keyboard.button(text=sec["name"], callback_data=f"edit_sec:{category_id}:{sec['section_id']}")
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")    
    keyboard.adjust(1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("edit_sec:"))
async def prompt_new_section_name(callback: types.CallbackQuery):
    try:
        _, category_id, section_id = callback.data.split(":")
    except ValueError:
        await callback.message.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö.")
        return

    EDIT_SECTION_MAP[callback.from_user.id] = (category_id, section_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞:")

@router.message(StateFilter(default_state))
async def handle_section_related_message(message: types.Message):
    from services.category_service import add_section, edit_section
    import uuid

    user_id = message.from_user.id
    text = message.text.strip()

    if user_id in EDIT_SECTION_MAP:
        category_id, section_id = EDIT_SECTION_MAP.pop(user_id)
        await edit_section(category_id, section_id, text)
        await message.answer(f"‚úÖ –†–∞–∑–¥–µ–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: {text}", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
    ]))
        return

    if user_id in SECTION_CATEGORY_MAP:
        category_id = SECTION_CATEGORY_MAP.pop(user_id)
        section = {"name": text, "section_id": str(uuid.uuid4())}
        await add_section(category_id, section)
        await message.answer(f"‚úÖ –†–∞–∑–¥–µ–ª '{text}' –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
    ]))




# === –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ ===
@router.callback_query(F.data == "delete_section")
async def choose_category_to_delete_section(callback: types.CallbackQuery):
    from services.category_service import get_all_categories
    categories = await get_all_categories()

    if not categories:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return

    keyboard = InlineKeyboardBuilder()
    for cat in categories:
        keyboard.button(text=cat.get("name", cat.get("category_id", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")), callback_data=f"del_sec_cat:{cat['category_id']}")
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")    
    keyboard.adjust(1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏:", reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("del_sec_cat:"))
async def choose_section_to_delete(callback: types.CallbackQuery):
    from services.category_service import get_all_categories
    category_id = callback.data.split("del_sec_cat:")[1]
    categories = await get_all_categories()
    category = next((c for c in categories if c["category_id"] == category_id), None)

    if not category or not category.get("sections"):
        await callback.message.answer("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–æ–≤.")
        return

    keyboard = InlineKeyboardBuilder()
    for sec in category["sections"]:
        keyboard.button(text=f"üóë {sec['name']}", callback_data=f"del_sec:{category_id}:{sec['section_id']}")
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")    
    keyboard.adjust(1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("del_sec:"))
async def delete_section_confirm(callback: types.CallbackQuery):
    from services.category_service import delete_section
    try:
        _, category_id, section_id = callback.data.split(":")
    except ValueError:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")
        return

    await delete_section(category_id, section_id)
    await callback.message.answer("‚úÖ –†–∞–∑–¥–µ–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
    ]))



# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞ ===
@router.callback_query(F.data == "edit_channel_id")
async def prompt_new_channel_id(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_new_channel_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID –∫–∞–Ω–∞–ª–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]))
    await callback.answer()

@router.message(AdminStates.waiting_for_new_channel_id)
async def save_new_channel_id(message: types.Message, state: FSMContext):
    await update_settings({"channel_id": message.text.strip()})
    await state.clear()
    await message.answer(f"‚úÖ ID –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: <code>{message.text.strip()}</code>", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
    ]))

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ID —á–∞—Ç–∞ ===
@router.callback_query(F.data == "edit_chat_id")
async def prompt_new_chat_id(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_new_chat_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID —á–∞—Ç–∞:")
    await callback.answer()

@router.message(AdminStates.waiting_for_new_chat_id)
async def save_new_chat_id(message: types.Message, state: FSMContext):
    await update_settings({"chat_id": message.text.strip()})
    await state.clear()
    await message.answer(f"‚úÖ ID —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: <code>{message.text.strip()}</code>", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
    ]))

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ===
@router.callback_query(F.data == "edit_channel_link")
async def prompt_new_channel_link(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_new_channel_link)
    await callback.message.answer("üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:")
    await callback.answer()

@router.message(AdminStates.waiting_for_new_channel_link)
async def save_new_channel_link(message: types.Message, state: FSMContext):
    await update_settings({"channel_invite_link": message.text.strip()})
    await state.clear()
    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
    ]))

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç ===
@router.callback_query(F.data == "edit_chat_link")
async def prompt_new_chat_link(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_new_chat_link)
    await callback.message.answer("üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:")
    await callback.answer()

@router.message(AdminStates.waiting_for_new_chat_link)
async def save_new_chat_link(message: types.Message, state: FSMContext):
    await update_settings({"chat_invite_link": message.text.strip()})
    await state.clear()
    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_admin')]
    ]))



from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter

# FSM-—Ö–µ–Ω–¥–ª–µ—Ä—ã —Å –æ—Ç–ª–∞–¥–∫–æ–π

@router.callback_query(F.data == "edit_channel_id")
async def start_edit_channel_id(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminStates.waiting_for_new_channel_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID –∫–∞–Ω–∞–ª–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]))
    await callback.answer()

@router.message(AdminStates.waiting_for_new_channel_id)
async def receive_new_channel_id(message: Message, state: FSMContext):

    new_id = message.text.strip()
    await update_settings({"channel_id": new_id})
    await state.clear()
    await message.answer(
    f"‚úÖ <b>ID –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª—ë–Ω:</b> <code>{message.text.strip()}</code>",
    parse_mode="HTML"
)



# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä


@router.callback_query(F.data == "back_to_admin")
async def back_inline_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    await admin_panel(callback.message, user_id=callback.from_user.id)

@router.callback_query(F.data == "back_to_admin")
async def back_inline_handler(callback: types.CallbackQuery):
    await callback.answer()
    await admin_panel_from_callback(callback)

async def admin_panel_from_callback(callback: types.CallbackQuery):
    uid = callback.from_user.id
    isadm = await is_admin(uid)
    await callback.message.answer(f"üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ ID: {uid}")
    status = "‚úÖ –∞–¥–º–∏–Ω" if isadm else "‚ùå –ù–ï –∞–¥–º–∏–Ω"
    await callback.message.answer(f"üîê –°—Ç–∞—Ç—É—Å: {status}")
    if not isadm:
        return await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    # –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÇ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞", callback_data="catalog_settings")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞", callback_data="change_channel_id")],
    ])
    await callback.message.answer("üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)

# === FSM –∏ –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ ===

class DeleteMaterialFSM(StatesGroup):
    choosing_category = State()
    choosing_section = State()
    choosing_material = State()
    confirming_deletion = State()


@router.callback_query(F.data == "delete_material")
async def start_delete_material(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    categories = await get_all_categories()
    if not categories:
        return await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", reply_markup=back_to_admin_btn())

    keyboard = InlineKeyboardBuilder()
    for cat in categories:
        keyboard.button(text=cat["name"], callback_data=f'del_cat_{cat["category_id"]}')
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
    keyboard.adjust(1)
    await callback.message.answer("üìÅ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", reply_markup=keyboard.as_markup())
    await state.set_state(DeleteMaterialFSM.choosing_category)









@router.callback_query(F.data.startswith("del_mat_"), DeleteMaterialFSM.choosing_material)
async def confirm_delete_material(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    mat_id = callback.data.split("_")[-1]
    await state.update_data(material_id=mat_id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_delete_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="confirm_delete_no")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ])
    await callback.message.answer("‚ö†Ô∏è –¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª?", reply_markup=keyboard)
    await state.set_state(DeleteMaterialFSM.confirming_deletion)


@router.callback_query(F.data == "confirm_delete_yes", DeleteMaterialFSM.confirming_deletion)
async def do_delete_material(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    from database.materials import delete_material
    data = await state.get_data()
    mat_id = data.get("material_id")
    if mat_id:
        await delete_material(mat_id)
        await callback.message.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª—ë–Ω.", reply_markup=back_to_admin_btn())
    else:
        await callback.message.answer("‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_admin_btn())
    await state.clear()


@router.callback_query(F.data == "confirm_delete_no", DeleteMaterialFSM.confirming_deletion)
async def cancel_delete_material(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    section_id = data.get("section_id")
    category_id = data.get("category_id")
    from database.materials import get_materials_by_category_and_section
    materials = await get_materials_by_category_and_section(category_id, section_id)
    keyboard = InlineKeyboardBuilder()
    for mat in materials:
        keyboard.button(text=mat["name"], callback_data=f'del_mat_{str(mat["_id"])}')
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")
    await callback.message.answer("üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard.as_markup())
    await state.set_state(DeleteMaterialFSM.choosing_material)


def back_to_admin_btn():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]])

@router.callback_query(F.data.startswith("del_cat_"), DeleteMaterialFSM.choosing_category)
async def choose_section_for_deletion(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    category_id = callback.data.replace("del_cat_", "")
    categories = await get_all_categories()
    category = next((c for c in categories if c["category_id"] == category_id), None)

    if not category or not category.get("sections"):
        return await callback.message.answer("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ä–∞–∑–¥–µ–ª–æ–≤.", reply_markup=back_to_admin_btn())

    await state.update_data(
        category_id=category_id,
        category_name=category["name"]
    )

    keyboard = InlineKeyboardBuilder()
    for sec in category["sections"]:
        keyboard.button(text=sec["name"], callback_data=f'del_sec_{sec["section_id"]}')
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="delete_material")
    keyboard.adjust(1)
    await callback.message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard.as_markup())
    await state.set_state(DeleteMaterialFSM.choosing_section)


@router.callback_query(DeleteMaterialFSM.choosing_section, F.data.startswith("del_sec_"))
async def choose_material_to_delete(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    section_id = callback.data.replace("del_sec_", "")
    data = await state.get_data()

    categories = await get_all_categories()
    category = next((c for c in categories if c["category_id"] == data["category_id"]), None)
    section = next((s for s in category["sections"] if s["section_id"] == section_id), None)

    if not section:
        return await callback.message.answer("‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    section_name = section["name"]
    await state.update_data(section_id=section_id, section_name=section_name)
    data = await state.get_data()

    materials = await get_materials_by_category_and_section(data["category_name"], data["section_name"])


    if not materials:
        return await callback.message.answer("‚ùå –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")

    keyboard = InlineKeyboardBuilder()
    for mat in materials:
        keyboard.button(text=mat["name"], callback_data=f"del_mat_{str(mat['_id'])}")
    keyboard.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"del_cat_{data['category_id']}")
    keyboard.adjust(1)

    await callback.message.answer("üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard.as_markup())
    await state.set_state(DeleteMaterialFSM.choosing_material)

@router.callback_query(F.data == "add_crystals")
async def start_add_crystals(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã:")
    await state.set_state(AdminStates.waiting_for_crystal_user_id)
    await callback.answer()

@router.message(AdminStates.waiting_for_crystal_user_id)
async def get_user_id_for_crystals(message: Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
        await state.update_data(target_user_id=user_id)
        await state.set_state(AdminStates.waiting_for_crystal_amount)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.message(AdminStates.waiting_for_crystal_amount)
async def get_crystal_amount(message: Message, state: FSMContext):
    from database.settings import get_users_collection
    data = await state.get_data()
    try:
        amount = int(message.text.strip())
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    user_id = data["target_user_id"]
    users = await get_users_collection()
    result = await users.update_one({"user_id": user_id}, {"$inc": {"crystals": amount}})

    if result.modified_count:
        await message.answer(f"‚úÖ {amount} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}.")
    else:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
    await state.clear()
