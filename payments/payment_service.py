from aiocryptopay import AioCryptoPay, Networks
import asyncio
import logging
from config import settings

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ CryptoBot API —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
# –í–∞–∂–Ω–æ: –∑–∞–º–µ–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç CryptoBot
CRYPTOBOT_TOKEN = "—Ç–æ–∫–µ–Ω"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CryptoBot API —Å —Ç–æ–∫–µ–Ω–æ–º: {CRYPTOBOT_TOKEN[:10]}...")

try:
    cryptopay = AioCryptoPay(
        token=CRYPTOBOT_TOKEN,
        network=Networks.MAIN_NET
    )
    logger.info("CryptoBot API –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CryptoBot API: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —á—Ç–æ–±—ã –∫–æ–¥ –Ω–µ –ø–∞–¥–∞–ª
    cryptopay = None

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ü–µ–Ω
SUBSCRIPTION_PRICES = {
    1: 10,  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π - 10 USDT
    2: 20,  # –ü—Ä–µ–º–∏—É–º - 20 USDT
    3: 1   # –ü–æ–ª–Ω—ã–π - 50 USDT
}

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–ø–æ update_id)
processed_updates = set()

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏–Ω–≤–æ–π—Å–æ–≤ (–ø–æ invoice_id)
processed_invoices = set()

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
processing_lock = asyncio.Lock()

async def create_payment_invoice(user_id: int, level: int) -> dict:
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ CryptoBot
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param level: –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏ (1, 2 –∏–ª–∏ 3)
    :return: –û–±—ä–µ–∫—Ç —Å—á–µ—Ç–∞ —Å URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
    """
    amount = SUBSCRIPTION_PRICES.get(level)
    if not amount:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: {level}")
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏: {level}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –∫–ª–∏–µ–Ω—Ç–∞
    if cryptopay is None:
        logger.error("CryptoBot API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        raise RuntimeError("CryptoBot API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞: user_id={user_id}, level={level}, amount={amount}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —á–µ—Ä–µ–∑ CryptoBot API
        invoice = await cryptopay.create_invoice(
            amount=amount,
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Ä–æ–≤–Ω—è {level}",
            currency_type="fiat", 
            fiat="USD",
            accepted_assets="USDT",
            payload=f"{user_id}:{level}"
        )
        
        logger.info(f"–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: invoice_id={invoice.invoice_id}")
        
        # –í–∞–∂–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç deep link –¥–ª—è CryptoBot
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ bot_invoice_url –∏–ª–∏ pay_url
        if hasattr(invoice, 'bot_invoice_url') and invoice.bot_invoice_url:
            payment_url = invoice.bot_invoice_url
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º bot_invoice_url: {payment_url}")
        else:
            # –ï—Å–ª–∏ bot_invoice_url –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é
            payment_url = f"https://t.me/CryptoBot?start=invoice_{invoice.invoice_id}"
            logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≤—Ä—É—á–Ω—É—é: {payment_url}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        asyncio.create_task(check_payment(invoice.invoice_id, user_id, level))
        
        return {
            "invoice_id": invoice.invoice_id,
            "payment_url": payment_url,
            "amount": amount,
            "level": level
        }
    except Exception as e:
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}", exc_info=True)
        raise

async def check_payment(invoice_id: str, user_id: int, level: int):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    
    :param invoice_id: ID —Å—á–µ—Ç–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param level: –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
    """
    logger.info(f"–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è invoice_id: {invoice_id}")
    
    if cryptopay is None:
        logger.error("CryptoBot API –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç
    for i in range(30):  # 30 –ø—Ä–æ–≤–µ—Ä–æ–∫ * 30 —Å–µ–∫—É–Ω–¥ = 15 –º–∏–Ω—É—Ç
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {i+1}/30 –¥–ª—è invoice_id: {invoice_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å—á–µ—Ç
            async with processing_lock:
                if invoice_id in processed_invoices:
                    logger.info(f"–°—á–µ—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫: {invoice_id}")
                    break
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_invoices –≤–º–µ—Å—Ç–æ get_invoice (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ API)
            invoices = await cryptopay.get_invoices(invoice_ids=[invoice_id])
            
            if not invoices:
                logger.warning(f"–°—á–µ—Ç {invoice_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await asyncio.sleep(30)
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π) —Å—á–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
            invoice = invoices[0]
            logger.info(f"–°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ {invoice_id}: {invoice.status}")
            
            if invoice.status == 'paid':
                logger.info(f"–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è invoice_id: {invoice_id}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –≥–æ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π
                async with processing_lock:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    if invoice_id in processed_invoices:
                        logger.info(f"–°—á–µ—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {invoice_id}")
                        break
                    
                    # –û—Ç–º–µ—á–∞–µ–º —Å—á–µ—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
                    processed_invoices.add(invoice_id)
                    logger.info(f"–°—á–µ—Ç {invoice_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await change_user_subscription(user_id, level)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    from aiogram import Bot
                    try:
                        bot = Bot(token=settings.BOT_TOKEN)
                        level_name = settings.SUBSCRIPTION_LEVELS_NAMES.get(level, f"–£—Ä–æ–≤–µ–Ω—å {level}")
                        
                        await bot.send_message(
                            chat_id=user_id,
                            text=f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
                                f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ '{level_name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
                                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!",
                            parse_mode="HTML"
                        )
                        
                        await bot.session.close()
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                    
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ —É—Ä–æ–≤–Ω—è {level}")
                    
                # –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫
                break
            
            # –ï—Å–ª–∏ —Å—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫
            if invoice.status in ['expired', 'cancelled']:
                logger.info(f"–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ –¥–ª—è invoice_id: {invoice_id}")
                break
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        
        # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(30)

async def register_payment(update_id: int, invoice_id: str, amount: float, user_id: int, level: int):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    :param update_id: ID –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç CryptoBot
    :param invoice_id: ID —Å—á–µ—Ç–∞
    :param amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param level: –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–ø–∏—Å–∫–∏
    :return: True –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    """
    logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞: update_id={update_id}, invoice_id={invoice_id}, user_id={user_id}, level={level}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –≥–æ–Ω–∫–∏ —É—Å–ª–æ–≤–∏–π
    async with processing_lock:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if update_id in processed_updates:
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞–Ω–µ–µ: {update_id}")
            return True
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å—á–µ—Ç
        if invoice_id in processed_invoices:
            logger.info(f"–°—á–µ—Ç —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ: {invoice_id}")
            return True
        
        # –û—Ç–º–µ—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å—á–µ—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
        processed_updates.add(update_id)
        processed_invoices.add(invoice_id)
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update_id} –∏ —Å—á–µ—Ç {invoice_id} –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ")
    
    try:        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await change_user_subscription(user_id, level)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        from aiogram import Bot
        try:
            bot = Bot(token=settings.BOT_TOKEN)
            level_name = settings.SUBSCRIPTION_LEVELS_NAMES.get(level, f"–£—Ä–æ–≤–µ–Ω—å {level}")
            
            await bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω!</b>\n\n"
                     f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ '{level_name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
                     f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞!",
                parse_mode="HTML"
            )
            
            await bot.session.close()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        logger.info(f"–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: update_id={update_id}, invoice_id={invoice_id}, user_id={user_id}, level={level}")
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)
        return False

# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å bot.py
async def setup_cryptobot_webhook(webhook_url: str) -> bool:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç URL –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ CryptoBot
    """
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞ –≤ CryptoBot API, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
    # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ API —Ç–∞–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É –º—ã –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    logger.info(f"URL –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ CryptoBot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}/cryptobot-webhook")
    return True

async def remove_cryptobot_webhook() -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç URL –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ CryptoBot
    """
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞ –≤ CryptoBot API, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
    logger.info("URL –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ CryptoBot —É–¥–∞–ª–µ–Ω")
    return True